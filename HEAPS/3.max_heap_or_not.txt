//Given an array, how to check if the given array represents a Binary Max-Heap.

// A Simple Solution is to first check root if itâ€™s greater than all of its descendants. Then check for children of the root. Time complexity of this solution is O(n2)

// An Efficient Solution is to compare root only with its children (not all descendants), if root is greater than its children and the same is true for all nodes, then tree is max-heap (This conclusion is based on transitive property of > operator, i.e., if x > y and y > z, then x > z).
// The last internal node is present at index (n-2)/2 assuming that indexing begins with 0.

// Javascript program to check whether a given array
// represents a max-heap or not

// Returns true if arr[i..n-1]
// represents a max-heap

function isHeap(arr, i, n) {
  // If (2 * i) + 1 >= n, then leaf node, so return true
  if (i >= (n - 1) / 2) {
    return true;
  }

  // If an internal node and
  // is greater than its
  // children, and same is
  // recursively true for the
  // children
  if (
    arr[i] >= arr[2 * i + 1] &&
    arr[i] >= arr[2 * i + 2] &&
    isHeap(arr, 2 * i + 1, n) &&
    isHeap(arr, 2 * i + 2, n)
  ) {
    return true;
  }

  return false;
}

// Driver program
let arr = [90, 15, 10, 7, 12, 2, 7, 3];
let n = arr.length - 1;
if (isHeap(arr, 0, n)) {
  console.log("Yes<br>");
} else {
  console.log("No<br>");
}
