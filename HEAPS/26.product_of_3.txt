Problem Description :-

Given an integer array A of size N.
You have to find the product of the three largest integers in array A from range 1 to i, where i goes from 1 to N.
Return an array B where B[i] is the product of the largest 3 integers in range 1 to i in array A. If i < 3, then the integer at index i in B should be -1.



Problem Constraints :-
1 <= N <= 10^5
0 <= A[i] <= 10^3



Input Format :-
First and only argument is an integer array A.



Output Format:-
Return an integer array B. B[i] denotes the product of the largest 3 integers in range 1 to i in array A.



Example Input
Input 1:

 A = [1, 2, 3, 4, 5]
Input 2:

 A = [10, 2, 13, 4]


Example Output
Output 1:

 [-1, -1, 6, 24, 60]
Output 2:

 [-1, -1, 260, 520]


Example Explanation
Explanation 1:

 For i = 1, ans = -1
 For i = 2, ans = -1
 For i = 3, ans = 1 * 2 * 3 = 6
 For i = 4, ans = 2 * 3 * 4 = 24
 For i = 5, ans = 3 * 4 * 5 = 60

 So, the output is [-1, -1, 6, 24, 60].
 
Explanation 2:

 For i = 1, ans = -1
 For i = 2, ans = -1
 For i = 3, ans = 10 * 2 * 13 = 260
 For i = 4, ans = 10 * 13 * 4 = 520

 So, the output is [-1, -1, 260, 520].
 ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



class MaxHeap {
    constructor() {
        this.heap = [];
    }
    insert(element) {
        this.heap.push(element);
        this.heapifyUp();
    }
    extractMax() {
        if (this.isEmpty()) {
            return null;
        }
        const max = this.heap[0];
        const lastElement = this.heap.pop();
        if (this.heap.length > 0) {
            this.heap[0] = lastElement;
            this.heapifyDown();
        }
        return max;
    }
    peek() {
        return this.isEmpty() ? null : this.heap[0];
    }
    isEmpty() {
        return this.heap.length === 0;
    }
    heapifyUp() {
        let currentIndex = this.heap.length - 1;
        while (currentIndex > 0) {
            const parentIndex = Math.floor((currentIndex - 1) / 2);
            if (this.heap[currentIndex] > this.heap[parentIndex]) {
                this.swap(currentIndex, parentIndex);
                currentIndex = parentIndex;
            } else {
                break;
            }
        }
    }
    heapifyDown() {
        let currentIndex = 0;
        while (true) {
            const leftChildIndex = 2 * currentIndex + 1;
            const rightChildIndex = 2 * currentIndex + 2;
            let largestChildIndex = currentIndex;
            if (
                leftChildIndex < this.heap.length &&
                this.heap[leftChildIndex] > this.heap[largestChildIndex]
            ) {
                largestChildIndex = leftChildIndex;
            }
            if (
                rightChildIndex < this.heap.length &&
                this.heap[rightChildIndex] > this.heap[largestChildIndex]
            ) {
                largestChildIndex = rightChildIndex;
            }
            if (largestChildIndex !== currentIndex) {
                this.swap(currentIndex, largestChildIndex);
                currentIndex = largestChildIndex;
            } else {
                break;
            }
        }
    }
    swap(i, j) {
        const temp = this.heap[i];
        this.heap[i] = this.heap[j];
        this.heap[j] = temp;
    }
}

let A = [10, 2, 13, 4];
let final = solve(A);
console.log(final);
// [-1, -1, 260, 520]
function solve(A) {
    let n = A.length;
    let pq = new MaxHeap();
    let ans = [];
    for (let i = 0; i < n; i++) {
        pq.insert(A[i]);
        if (pq.heap.length > 2) {
            // extract and  do the required multiplications
            let p1 = pq.extractMax();
            let p2 = pq.extractMax();
            let p3 = pq.extractMax();
            ans[i] = p1 * p2 * p3;
            // insert it back into the pq.
            pq.insert(p1);
            pq.insert(p2);
            pq.insert(p3);
        } else {
            ans[i] = -1;
        }
    }
    return ans;
}