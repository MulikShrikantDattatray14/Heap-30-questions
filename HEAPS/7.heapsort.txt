// works in NlogN and it sorts the given input array .
// step-1 : convert the given array into the heap using buildheap function - 0(N), but stil  this array is not sorted yet. however the top element in the heap is largerst element, so w can keep removing the top element. for removing use the delete function that we used in the min_heap/max_heap implementation.and again keep removing the top element.heapify function takes - logN and for every n times -thus , NlogN, thus total T.C is - 0(N)+0(NlogN



//In brief:

//1.Comparison - Based Sorting(e.g., Bubble Sort, Insertion Sort, Merge Sort):

//a.Compares elements using a specified comparison operator.
//b.Time complexity is typically O(n ^ 2) or O(n log n).
//c.Can be stable(equal elements maintain order).

//2.Heap Sort:
//a.Not comparison - based; relies on the heap data structure.
//b.Time complexity is O(n log n).
//c.Not stable(equal elements may change order).
//d.Builds a heap and repeatedly extracts the root to sort the elements.


function maxHeapify(arr, n, i) {
  let largest = i; // Initialize largest as root
  const leftChild = 2 * i + 1; // Left child index
  const rightChild = 2 * i + 2; // Right child index

  // If left child is larger than root
  if (leftChild < n && arr[leftChild] > arr[largest]) {
    largest = leftChild;
  }

  // If right child is larger than current largest
  if (rightChild < n && arr[rightChild] > arr[largest]) {
    largest = rightChild;
  }

  // If largest is not the root
  if (largest !== i) {
    // Swap the root with the largest element
    [arr[i], arr[largest]] = [arr[largest], arr[i]];

    // Recursively heapify the affected subtree
    maxHeapify(arr, n, largest);
  }
}

function heapSort(arr) {
  console.log(arr)
  const n = arr.length;
  // Build max heap
  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {
    maxHeapify(arr, n, i);
  }
  console.log(arr)
  // now use heapify for each node .
  // start from back
  // Extract elements from the heap one by one
  for (let i = n - 1; i > 0; i--) {
    // Move current root to the end
    let temp = arr[0];
    arr[0] = arr[i];
    arr[i] = temp;
    // Call maxHeapify on the reduced heap
    //maxHeapify(arr,arr_size,first_index)
    maxHeapify(arr, i, 0);

  }
}

// Example usage
const array = [40, 10, 30, 50, 60, 15];
heapSort(array);

console.log("Sorted Array:", array);
