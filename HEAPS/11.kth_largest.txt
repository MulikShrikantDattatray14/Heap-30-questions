//approach-1 : 0(N) time complexity - using prority queue/max_heap

class MaxHeap {
    constructor() {
      this.heap = [];
    }
  
    insert(val) {
      this.heap.push(val);
      this.heapifyUp();
    }
  
    extractMax() {
      if (this.isEmpty()) {
        return null;
      }
  
      const max = this.heap[0];
      const lastElement = this.heap.pop();
  
      if (this.heap.length > 0) {
        this.heap[0] = lastElement;
        this.heapifyDown();
      }
  
      return max;
    }
  
    isEmpty() {
      return this.heap.length === 0;
    }
  
    heapifyUp() {
      let index = this.heap.length - 1;
  
      while (index > 0) {
        const parentIndex = Math.floor((index - 1) / 2);
  
        if (this.heap[index] <= this.heap[parentIndex]) {
          break;
        }
  
        this.swap(index, parentIndex);
        index = parentIndex;
      }
    }
  
    heapifyDown() {
      let index = 0;
      const length = this.heap.length;
  
      while (true) {
        const leftChildIndex = 2 * index + 1;
        const rightChildIndex = 2 * index + 2;
        let largest = index;
  
        if (
          leftChildIndex < length &&
          this.heap[leftChildIndex] > this.heap[largest]
        ) {
          largest = leftChildIndex;
        }
  
        if (
          rightChildIndex < length &&
          this.heap[rightChildIndex] > this.heap[largest]
        ) {
          largest = rightChildIndex;
        }
  
        if (index === largest) {
          break;
        }
  
        this.swap(index, largest);
        index = largest;
      }
    }
  
    swap(i, j) {
      const temp = this.heap[i];
      this.heap[i] = this.heap[j];
      this.heap[j] = temp;
    }
  }
  
  function findKthLargest(nums, k) {
    const maxHeap = new MaxHeap();
  
    for (const num of nums) {
      maxHeap.insert(num);
    }
  
    for (let i = 1; i < k; i++) {
      maxHeap.extractMax();
    }
  
    return maxHeap.extractMax();
  }
  
  // Example usage:
  const nums = [3, 1, 4, 2, 5];
  const k = 1;
  const result = findKthLargest(nums, k);
  console.log(`The ${k}th largest element is: ${result}`);
  
  //approach -2 : NlogN approach-
  
  // var findKthLargest = function(nums, k) {
  //     nums=nums.sort((a,b)=>b-a)
  //     return nums[k-1];
  
  // };
  