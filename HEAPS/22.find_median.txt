The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.

For example, for arr = [2,3,4], the median is 3.
For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.
Implement the MedianFinder class:

MedianFinder() initializes the MedianFinder object.
void addNum(int num) adds the integer num from the data stream to the data structure.
double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.
 

Example 1:

Input
["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]

Explanation
MedianFinder medianFinder = new MedianFinder();
medianFinder.addNum(1);    // arr = [1]
medianFinder.addNum(2);    // arr = [1, 2]
medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
medianFinder.addNum(3);    // arr[1, 2, 3]
medianFinder.findMedian(); // return 2.0
 

Constraints:-

-105 <= num <= 105
There will be at least one element in the data structure before calling findMedian.
At most 5 * 104 calls will be made to addNum and findMedian.


===============================================================================================================================================================================================================================


class MinHeap {
    constructor() {
        this.heap = [];
    }

    insert(element) {
        this.heap.push(element);
        this.heapifyUp();
    }

    extractMin() {
        if (this.isEmpty()) {
            return null;
        }

        const min = this.heap[0];
        const lastElement = this.heap.pop();

        if (this.heap.length > 0) {
            this.heap[0] = lastElement;
            this.heapifyDown();
        }

        return min;
    }

    peek() {
        return this.isEmpty() ? null : this.heap[0];
    }

    isEmpty() {
        return this.heap.length === 0;
    }

    heapifyUp() {
        let currentIndex = this.heap.length - 1;

        while (currentIndex > 0) {
            const parentIndex = Math.floor((currentIndex - 1) / 2);
            if (this.heap[currentIndex] < this.heap[parentIndex]) {
                this.swap(currentIndex, parentIndex);
                currentIndex = parentIndex;
            } else {
                break;
            }
        }
    }

    heapifyDown() {
        let currentIndex = 0;

        while (true) {
            const leftChildIndex = 2 * currentIndex + 1;
            const rightChildIndex = 2 * currentIndex + 2;
            let smallestChildIndex = currentIndex;

            if (
                leftChildIndex < this.heap.length &&
                this.heap[leftChildIndex] < this.heap[smallestChildIndex]
            ) {
                smallestChildIndex = leftChildIndex;
            }

            if (
                rightChildIndex < this.heap.length &&
                this.heap[rightChildIndex] < this.heap[smallestChildIndex]
            ) {
                smallestChildIndex = rightChildIndex;
            }

            if (smallestChildIndex !== currentIndex) {
                this.swap(currentIndex, smallestChildIndex);
                currentIndex = smallestChildIndex;
            } else {
                break;
            }
        }
    }

    swap(i, j) {
        const temp = this.heap[i];
        this.heap[i] = this.heap[j];
        this.heap[j] = temp;
    }
}

class MaxHeap {
    constructor() {
        this.heap = [];
    }

    insert(element) {
        this.heap.push(element);
        this.heapifyUp();
    }

    extractMax() {
        if (this.isEmpty()) {
            return null;
        }

        const max = this.heap[0];
        const lastElement = this.heap.pop();

        if (this.heap.length > 0) {
            this.heap[0] = lastElement;
            this.heapifyDown();
        }

        return max;
    }

    peek() {
        return this.isEmpty() ? null : this.heap[0];
    }

    isEmpty() {
        return this.heap.length === 0;
    }

    heapifyUp() {
        let currentIndex = this.heap.length - 1;

        while (currentIndex > 0) {
            const parentIndex = Math.floor((currentIndex - 1) / 2);
            if (this.heap[currentIndex] > this.heap[parentIndex]) {
                this.swap(currentIndex, parentIndex);
                currentIndex = parentIndex;
            } else {
                break;
            }
        }
    }

    heapifyDown() {
        let currentIndex = 0;

        while (true) {
            const leftChildIndex = 2 * currentIndex + 1;
            const rightChildIndex = 2 * currentIndex + 2;
            let largestChildIndex = currentIndex;

            if (
                leftChildIndex < this.heap.length &&
                this.heap[leftChildIndex] > this.heap[largestChildIndex]
            ) {
                largestChildIndex = leftChildIndex;
            }

            if (
                rightChildIndex < this.heap.length &&
                this.heap[rightChildIndex] > this.heap[largestChildIndex]
            ) {
                largestChildIndex = rightChildIndex;
            }

            if (largestChildIndex !== currentIndex) {
                this.swap(currentIndex, largestChildIndex);
                currentIndex = largestChildIndex;
            } else {
                break;
            }
        }
    }

    swap(i, j) {
        const temp = this.heap[i];
        this.heap[i] = this.heap[j];
        this.heap[j] = temp;
    }
}

function findMedianStream(A) {
    // if x is median then , maxheap stores numbers smaller than x and minheap stores numbers greater than x.
    const maxHeap = new MaxHeap();// stores smaller numbers and returns the max among them.
    const minHeap = new MinHeap();// stores greater numbers and returns the min among them.
    const result = [];

    for (let i = 0; i < A.length; i++) {
        // starting by inserting into the maxheap first 
        if (maxHeap.isEmpty() || A[i] <= maxHeap.peek()) {
            maxHeap.insert(A[i]);
        } else {
            minHeap.insert(A[i]);
        }


        // Balance the heaps
        if (maxHeap.heap.length > minHeap.heap.length + 1) {
            minHeap.insert(maxHeap.extractMax());
        } else if (minHeap.heap.length > maxHeap.heap.length) {
            maxHeap.insert(minHeap.extractMin());
        }

        // Calculate median
        if (maxHeap.heap.length === minHeap.heap.length) {
            result.push(maxHeap.peek());
        } else {
            result.push(maxHeap.peek());
        }
    }

    return result;
}

// Example usage:
const A1 = [1, 2, 5, 4, 3];//[ 1, 1, 2, 2, 3 ]
const A2 = [5, 17, 100, 11];//[ 5, 5, 17, 11 ]
const A3 = [5, 17, 100, 11];

console.log(findMedianStream(A1)); // Output: [1, 1, 2, 2, 3]
console.log(findMedianStream(A2)); // Output: [5, 5, 17, 11]
console.log(findMedianStream(A3))


/////////////////////////////////////////////////////////////////////////////////////////////////////////////

leetcode submission :https://leetcode.com/problems/find-median-from-data-stream/description/ 


If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.

For example, for arr = [2,3,4], the median is 3.
For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.


 var MedianFinder = function() {
     this. maxHeap = new MaxHeap();
    this. minHeap = new MinHeap();  
  };
  
  /** 
   * @param {number} num
   * @return {void}
   */
  MedianFinder.prototype.addNum = function(num) {
       if (this.maxHeap.isEmpty() ||num <= this.maxHeap.peek()) {
        this.maxHeap.insert(num);
      } else {
        this.minHeap.insert(num);
      }
  
      // Balance the heaps
      if (this.maxHeap.heap.length > this.minHeap.heap.length + 1) {
        this.minHeap.insert(this.maxHeap.extractMax());
      } else if (this.minHeap.heap.length >this.maxHeap.heap.length) {
        this.maxHeap.insert(this.minHeap.extractMin());
      }
  };
  
  /**
   * @return {number}
   */
  MedianFinder.prototype.findMedian = function() {
      // Calculate median
      if (this.maxHeap.heap.length === this.minHeap.heap.length) {
       return(this.maxHeap.peek()+this.minHeap.peek())/2.0;
      } else {
       return (this.maxHeap.peek());
      }
  };
  
  /** 
   * Your MedianFinder object will be instantiated and called as such:
   * var obj = new MedianFinder()
   * obj.addNum(num)
   * var param_2 = obj.findMedian()
   */