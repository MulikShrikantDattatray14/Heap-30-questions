Maximum Sum Combinations :-

Problem Description
 
Given two equally sized 1-D arrays A, B containing N integers each.
A sum combination is made by adding one element from array A and another element of array B.
Return the maximum C valid sum combinations from all the possible sum combinations.

Problem Constraints :-
1 <= N <= 10^5
1 <= A[i] <= 10^5
1 <= C <= N

Input Format :-
First argument is an one-dimensional integer array A of size N.
Second argument is an one-dimensional integer array B of size N.
Third argument is an integer C.


Output Format :-
Return a one-dimensional integer array of size C denoting the top C maximum sum combinations.

NOTE:
The returned array must be sorted in non-increasing order.



Example Input
Input 1:

 A = [3, 2]
 B = [1, 4]
 C = 2
Input 2:

 A = [1, 4, 2, 3]
 B = [2, 5, 1, 6]
 C = 4


Example Output
Output 1:

 [7, 6]
Output 1:

 [10, 9, 9, 8]


Example Explanation
Explanation 1:

 7     (A : 3) + (B : 4)
 6     (A : 2) + (B : 4)
Explanation 2:

 10   (A : 4) + (B : 6)
 9   (A : 4) + (B : 5)
 9   (A : 3) + (B : 6)
 8   (A : 3) + (B : 5)



//https://www.youtube.com/watch?v=KWgh9keTRAU

//same code for the question
//https://www.interviewbit.com/problems/maximum-sum-combinations/
//https://www.interviewbit.com/problems/n-max-pair-combinations/




===============================================================================================================================================================================================================================


class MaxHeap {
    constructor() {
        this.heap = [];
    }

    insert(element) {// always at bottom
        this.heap.push(element);
        this.heapifyUp();
    }

    extractMax() {// top root element
        if (this.isEmpty()) {
            return null;
        }

        const max = this.heap[0];
        const lastElement = this.heap.pop();
        // put last element on the top most position
        if (this.heap.length > 0) {
            this.heap[0] = lastElement;
            this.heapifyDown();
        }

        return max;
    }

    peek() {
        return this.isEmpty() ? null : this.heap[0];
    }

    isEmpty() {
        return this.heap.length === 0;
    }

    heapifyUp() {
        let currentIndex = this.heap.length - 1;

        while (currentIndex > 0) {
            const parentIndex = Math.floor((currentIndex - 1) / 2);
            if (this.heap[currentIndex] > this.heap[parentIndex]) {
                this.swap(currentIndex, parentIndex);
                currentIndex = parentIndex;
            } else {
                break;
            }
        }
    }

    heapifyDown() {
        let currentIndex = 0;

        while (true) {
            const leftChildIndex = 2 * currentIndex + 1;
            const rightChildIndex = 2 * currentIndex + 2;
            let largestChildIndex = currentIndex;

            if (leftChildIndex < this.heap.length && this.heap[leftChildIndex] > this.heap[largestChildIndex]) {
                largestChildIndex = leftChildIndex;
            }

            if (rightChildIndex < this.heap.length && this.heap[rightChildIndex] > this.heap[largestChildIndex]) {
                largestChildIndex = rightChildIndex;
            }

            if (largestChildIndex !== currentIndex) {
                this.swap(currentIndex, largestChildIndex);
                currentIndex = largestChildIndex;
            } else {
                break;
            }
        }
    }

    swap(i, j) {
        const temp = this.heap[i];
        this.heap[i] = this.heap[j];
        this.heap[j] = temp;
    }
}




function maxCombinations(N, K, A, B) {
    let ans = [];// returns the final answer.
    // sort both arrays in increasing order.
    A.sort((a, b) => a - b);
    B.sort((a, b) => a - b);

    let pq = new MaxHeap();
    let s = new Set();
    // insert elements and also positions- start from backwards
    pq.insert([A[A.length - 1] + B[B.length - 1], [N - 1, N - 1]]);
    // keep track of unique positions.
    s.add(JSON.stringify([N - 1, N - 1]));

    while (K > 0) {
        let p = pq.extractMax();
        let sum = p[0];
        let i = p[1][0];
        let j = p[1][1];
        ans.push(sum);

        if (!s.has(JSON.stringify([i - 1, j])) && i - 1 >= 0 && j >= 0) {
            pq.insert([A[i - 1] + B[j], [i - 1, j]]);
            s.add(JSON.stringify([i - 1, j]));
        }

        if (!s.has(JSON.stringify([i, j - 1])) && i >= 0 && j - 1 >= 0) {
            pq.insert([A[i] + B[j - 1], [i, j - 1]]);
            s.add(JSON.stringify([i, j - 1]));
        }

        K--;
    }

    return ans;
}

A = [1, 4, 2, 3]
B = [2, 5, 1, 6]
C = 4
const K = C

const N = A.length

let result = (maxCombinations(N, K, A, B));

console.log(result);