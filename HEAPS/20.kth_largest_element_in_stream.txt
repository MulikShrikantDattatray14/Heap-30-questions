703. Kth Largest Element in a Stream :-
-----------------------------------

Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Implement KthLargest class:-

KthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.
int add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.
 

Example 1:

Input
["KthLargest", "add", "add", "add", "add", "add"]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
Output
[null, 4, 5, 5, 8, 8]

Explanation
KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
kthLargest.add(3);   // return 4
kthLargest.add(5);   // return 5
kthLargest.add(10);  // return 5
kthLargest.add(9);   // return 8
kthLargest.add(4);   // return 8
 

Constraints:

1 <= k <= 104
0 <= nums.length <= 104
-104 <= nums[i] <= 104
-104 <= val <= 104
At most 104 calls will be made to add.
It is guaranteed that there will be at least k elements in the array when you search for the kth element.
===============================================================================================================================================================================================================================

//https://www.youtube.com/watch?v=0tFmP1Eiilg&t=153s
class MinHeap {
  constructor() {
    this.heap = [];
  }

  insert(element) {
    this.heap.push(element);
    this.heapifyUp();
  }

  extractMin() {
    if (this.isEmpty()) {
      return null;
    }

    const min = this.heap[0];
    const lastElement = this.heap.pop();

    if (this.heap.length > 0) {
      this.heap[0] = lastElement;
      this.heapifyDown();
    }

    return min;
  }

  peek() {
    return this.isEmpty() ? null : this.heap[0];
  }

  isEmpty() {
    return this.heap.length === 0;
  }

  heapifyUp() {
    let currentIndex = this.heap.length - 1;

    while (currentIndex > 0) {
      const parentIndex = Math.floor((currentIndex - 1) / 2);
      if (this.heap[currentIndex] < this.heap[parentIndex]) {
        this.swap(currentIndex, parentIndex);
        currentIndex = parentIndex;
      } else {
        break;
      }
    }
  }

  heapifyDown() {
    let currentIndex = 0;

    while (true) {
      const leftChildIndex = 2 * currentIndex + 1;
      const rightChildIndex = 2 * currentIndex + 2;
      let smallestChildIndex = currentIndex;

      if (
        leftChildIndex < this.heap.length &&
        this.heap[leftChildIndex] < this.heap[smallestChildIndex]
      ) {
        smallestChildIndex = leftChildIndex;
      }

      if (
        rightChildIndex < this.heap.length &&
        this.heap[rightChildIndex] < this.heap[smallestChildIndex]
      ) {
        smallestChildIndex = rightChildIndex;
      }

      if (smallestChildIndex !== currentIndex) {
        this.swap(currentIndex, smallestChildIndex);
        currentIndex = smallestChildIndex;
      } else {
        break;
      }
    }
  }

  swap(i, j) {
    const temp = this.heap[i];
    this.heap[i] = this.heap[j];
    this.heap[j] = temp;
  }
}

function solve(A, B) {
  let minHeap = new MinHeap();
  let n = B.length;
  let ans = new Array(n).fill(0);
  for (let i = 0; i < A; i++) {
    minHeap.insert(B[i]);
    if (i !== A - 1) ans[i] = -1;
    else ans[i] = minHeap.peek();
  }

  for (let i = A; i < n; i++) {
    if (B[i] <= minHeap.peek()) {
      ans[i] = minHeap.peek();
    } else {
      minHeap.extractMin();
      minHeap.insert(B[i]);
      ans[i] = minHeap.peek();
    }
  }
  return ans;
}
k = 4;
nums = [1, 2, 3, 4, 5, 6];
let ans = solve(k, nums);
console.log(ans);

///////////////////////////////////////////////////////////
//leetcode sturcture
//https://www.youtube.com/watch?v=0tFmP1Eiilg&t=153s
var KthLargest = function (k, nums) {
  this.k = k;
  this.minHeap = new MinHeap();

  for (let i = 0; i < nums.length; i++) {
    this.add(nums[i]);
  }
};

KthLargest.prototype.add = function (val) {
  this.minHeap.insert(val);

  while (this.minHeap.heap.length > this.k) {
    this.minHeap.extractMin();
  }

  return this.minHeap.peek(); //[1,1,1,1,2,3]
};
