// Given an array of N elements, where each element is at most K away from its target position, devise an algorithm that sorts in O(N log K) time.

// Examples:

// Input: arr[] = {6, 5, 3, 2, 8, 10, 9}, K = 3
// Output: arr[] = {2, 3, 5, 6, 8, 9, 10}

// Input: arr[] = {10, 9, 8, 7, 4, 70, 60, 50}, k = 4
// Output: arr[] = {4, 7, 8, 9, 10, 50, 60, 70}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MinHeap {
    constructor() {
        this.heap = [];
    }

    insert(element) {
        this.heap.push(element);
        this.heapifyUp();
    }

    extractMin() {
        if (this.isEmpty()) {
            return null;
        }

        const min = this.heap[0];
        const lastElement = this.heap.pop();

        if (this.heap.length > 0) {
            this.heap[0] = lastElement;
            this.heapifyDown();
        }

        return min;
    }

    peek() {
        return this.isEmpty() ? null : this.heap[0];
    }

    isEmpty() {
        return this.heap.length === 0;
    }

    heapifyUp() {
        let currentIndex = this.heap.length - 1;

        while (currentIndex > 0) {
            const parentIndex = Math.floor((currentIndex - 1) / 2);
            if (this.heap[currentIndex] < this.heap[parentIndex]) {
                this.swap(currentIndex, parentIndex);
                currentIndex = parentIndex;
            } else {
                break;
            }
        }
    }

    heapifyDown() {
        let currentIndex = 0;

        while (true) {
            const leftChildIndex = 2 * currentIndex + 1;
            const rightChildIndex = 2 * currentIndex + 2;
            let smallestChildIndex = currentIndex;

            if (
                leftChildIndex < this.heap.length &&
                this.heap[leftChildIndex] < this.heap[smallestChildIndex]
            ) {
                smallestChildIndex = leftChildIndex;
            }

            if (
                rightChildIndex < this.heap.length &&
                this.heap[rightChildIndex] < this.heap[smallestChildIndex]
            ) {
                smallestChildIndex = rightChildIndex;
            }

            if (smallestChildIndex !== currentIndex) {
                this.swap(currentIndex, smallestChildIndex);
                currentIndex = smallestChildIndex;
            } else {
                break;
            }
        }
    }

    swap(i, j) {
        const temp = this.heap[i];
        this.heap[i] = this.heap[j];
        this.heap[j] = temp;
    }
}

function kSort(arr, n, k) {
    const minHeap = new MinHeap();
    // add first k + 1 items to the min heap
    for (let i = 0; i <= k; i++) {
        minHeap.insert(arr[i]);
    }
    let index = 0;

    // here even if size=k then n will be n=k,so i<n works fine
    for (let i = k + 1; i < n; i++) {
        arr[index] = minHeap.extractMin();
        index++;
        minHeap.insert(arr[i]); // insert the remaining elements
    }

    while (!minHeap.isEmpty()) {
        // remaining elements from pq
        arr[index] = minHeap.extractMin();
        index++;
    }
    return arr;
}

let A = [9, 11, 14, 18, 3];
let B = 4;
let ans = solve(A, B);
console.log(ans);
function solve(A, B) {
    return kSort(A, A.length, B);
}