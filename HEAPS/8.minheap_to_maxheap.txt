// To convert a min heap to a max heap in JavaScript, you can follow these steps:

// 1.Start from the last non-leaf node and move towards the root.
// 2.For each node, swap it with its largest child until the heap property is restored.

// The idea is, simply build Max Heap without caring about the input. Start from the bottom-most and rightmost internal node of Min-Heap and heapify all internal nodes in the bottom-up way to build the Max heap.

//Follow the given steps to solve the problem:

//1.Call the Heapify function from the rightmost internal node of Min-Heap
//2.Heapify all internal nodes in the bottom-up way to build max heap
//3.Print the Max-Heap

//Algorithm: Here’s an algorithm for converting a min heap to a max heap:

//1.Start at the last non - leaf node of the heap(i.e., the parent of the last leaf node).For a binary heap, this node is located at the index floor((n – 1) / 2), where n is the number of nodes in the heap.
//2.For each non - leaf node, perform a “heapify” operation to fix the heap property.In a min heap, this operation involves checking whether the value of the node is greater than that of its children, and if so, swapping the node with the smaller of its children.In a max heap, the operation involves checking whether the value of the node is less than that of its children, and if so, swapping the node with the larger of its children.
//3.Repeat step 2 for each of the non - leaf nodes, working your way up the heap.When you reach the root of the heap, the entire heap should now be a max heap.

// Here's a JavaScript function that performs the conversion:
function minHeapToMaxHeap(heap) {
  //1.Call the Heapify function from the rightmost internal node of Min-Heap
  const lastNonLeafIndex = Math.floor((heap.length - 2) / 2);
  //can also be :
  // int lastNonLeafIndex = (n - 1) / 2;

  // Perform heapify from the last non-leaf node to the root
  for (let i = lastNonLeafIndex; i >= 0; i--) {
    heapify(heap, i);
  }
}

// Function to heapify a subtree rooted at index i
function heapify(heap, i) {
  const leftChildIndex = 2 * i + 1;
  const rightChildIndex = 2 * i + 2;
  let largest = i;

  // Compare with left child
  if (leftChildIndex < heap.length && heap[leftChildIndex] > heap[largest]) {
    largest = leftChildIndex;
  }

  // Compare with right child
  if (rightChildIndex < heap.length && heap[rightChildIndex] > heap[largest]) {
    largest = rightChildIndex;
  }

  // If the largest element is not the current node, swap them and recursively heapify
  if (largest !== i) {
    swap(heap, i, largest);
    heapify(heap, largest);
  }
}

// Function to swap two elements in an array
function swap(arr, i, j) {
  const temp = arr[i];
  arr[i] = arr[j];
  arr[j] = temp;
}

// Example usage:
const minHeap = [3, 5, 9, 6, 8, 20, 10, 12, 18, 9];
console.log("Min Heap:", minHeap);
minHeapToMaxHeap(minHeap);
console.log("Max Heap:", minHeap);
