// To merge two binary max heaps, you can follow these steps:

// Concatenate the two arrays representing the max heaps.
// Perform the max heapify operation on each non-leaf node in reverse order.

function maxHeapify(arr, n, i) {
    let largest = i; // Initialize largest as root
    const leftChild = 2 * i + 1; // Left child index
    const rightChild = 2 * i + 2; // Right child index

    // If left child is larger than root
    if (leftChild < n && arr[leftChild] > arr[largest]) {
        largest = leftChild;
    }

    // If right child is larger than current largest
    if (rightChild < n && arr[rightChild] > arr[largest]) {
        largest = rightChild;
    }

    // If largest is not the root
    if (largest !== i) {
        // Swap the root with the largest element
        [arr[i], arr[largest]] = [arr[largest], arr[i]];

        // Recursively heapify the affected subtree
        maxHeapify(arr, n, largest);
    }
}

function mergeMaxHeaps(arr1, arr2) {
    // Step 1: Concatenate the two arrays
    const mergedArray = arr1.concat(arr2);
    const mergedArraySize = mergedArray.length;

    // Step 2:Start from the bottom-most and rightmost internal node of Max-Heap and heapify all internal nodes in the bottom-up way to build the Max heap.
    for (let i = Math.floor(mergedArraySize / 2) - 1; i >= 0; i--) {
        maxHeapify(mergedArray, mergedArraySize, i);
    }

    return mergedArray;
}

// Example usage
const array1 = [4, 10, 3, 5, 1];
const array2 = [15, 8, 12, 7, 9];
const mergedArray = mergeMaxHeaps(array1, array2);

console.log("Merged Max Heap:", mergedArray);
